import './style.css'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'
import * as dat from 'dat.gui'
import gsap from 'gsap'

let playedPositions = []
let winner = -1
let recheckPosition = 1
const objToTest = []
let dartCount = 0
let importedFont

/**
 * Dat GUI
 */
const gui = new dat.GUI()

/**
 * Raycaster
 */
const raycaster = new THREE.Raycaster()

/**
 * Dart Object
 */
const dartObject = {}

const keys = {
    1: {},
    2: {},
    3: {},
    4: {},
    5: {},
    6: {},
    7: {},
    8: {},
    9: {}
}

/**
 * Base
 */
// Canvas
const canvas = document.querySelector('canvas.webgl')

// Scene
const scene = new THREE.Scene()

// Loaders
const dracoLoader = new DRACOLoader()
dracoLoader.setDecoderPath('/draco/')

const gltfLoader = new GLTFLoader()
gltfLoader.setDRACOLoader(dracoLoader)

const fontLoader = new THREE.FontLoader()

/**
 * Models
 */
let loaded = false
gltfLoader.load(
    '/models/tic-tac-toe3.glb',
    (gltf) => {
        for(let i = 1; i <= 9; i++){
            keys[i].mesh = gltf.scene.children.find((child) => child.name === i.toString())
            keys[i].mesh.material = new THREE.MeshBasicMaterial({color: 0xbde0fe})
            keys[i].value = (Math.random() - 0.5) * 20
            objToTest.push(keys[i].mesh)
        }
        gltf.scene.children.find((child) => child.name === 'grid')
            .material = new THREE.MeshBasicMaterial({color: 0x1e6091})

        scene.add(gltf.scene)
        loaded = true
    }
)

gltfLoader.load(
    '/models/CrossDart.glb',
    (gltf) => {
        dartObject.crossMesh = gltf.scene.children[0]
        dartObject.crossMesh.material = new THREE.MeshBasicMaterial({color: 0x95d5b2})
    }
)
gltfLoader.load(
    '/models/RingDart.glb',
    (gltf) => {
        dartObject.circleMesh = gltf.scene.children[0]
        dartObject.circleMesh.material = new THREE.MeshBasicMaterial({color: 0xff8fa3})
    }
)

fontLoader.load(
    '/fonts/helvetiker_regular.typeface.json',
    ( font ) => {
        importedFont = font
    }
)

/**
 * Sizes
 */
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}

window.addEventListener('resize', () =>
{
    // Update sizes
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight

    // Update camera
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()

    // Update renderer
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
})

const createCrossDart = () => {
    let dart = new THREE.Mesh()
    dart = dartObject.crossMesh.clone()
    dart.position.set(0.7, -0.6, 0)
    dart.position.x += (Math.random() - 0.5) * 5
    dart.position.y += (Math.random() - 0.5) * 5
    scene.add(dart)
    dartCount++
    return dart
}

const createCircleDart = () => {
    let dart = new THREE.Mesh()
    dart = dartObject.circleMesh.clone()
    dart.position.set(0.7, -0.6, 0)
    dart.position.y += (Math.random() - 0.5) * 5
    dart.position.x += (Math.random() - 0.5) * 5
    scene.add(dart)
    dartCount++
    return dart
}

const createText = (txtToDisplay, position) => {
    const textGeometry = new THREE.TextGeometry(
        txtToDisplay,
        {
            font: importedFont,
            size: 0.7,
            height: 0.3,
            curveSegments: 8,
            bevelEnabled: true,
            bevelThickness: 0.04,
            bevelSize: 0.02,
            bevelOffset: 0,
            bevelSegment: 5
        }
    )
    textGeometry.center()
    const textMaterial = new THREE.MeshBasicMaterial({color: 0xf8961e})
    const text = new THREE.Mesh(textGeometry, textMaterial)
    text.position.set(position.x, position.y, position.z)
    text.lookAt(camera.position)
    text.name = 'text'
    scene.add(text)
}


/**
 * Camera
 */
// Base camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
camera.position.x = 0
camera.position.y = 0
camera.position.z = 1
scene.add(camera)

// Controls
const controls = new OrbitControls(camera, canvas)
controls.enableDamping = true

/**
 * Lights
 */
const pointLight = new THREE.PointLight(0xffffff, 0.8)
pointLight.position.set(0,0.45,2.0)
scene.add(pointLight)

/**
 * Renderer
 */
const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true,
})
renderer.setSize(sizes.width, sizes.height)
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
renderer.setClearColor(0x1a759f)
renderer.outputEncoding = THREE.sRGBEncoding

/**
 * Hovering mouse
 */
const mouse = new THREE.Vector2()
window.addEventListener('mousemove', function (_event){
    mouse.x = _event.clientX / sizes.width * 2 - 1
    mouse.y = - (_event.clientY / sizes.height * 2 - 1)
})

window.addEventListener('click', function (){
    if(currentIntersect){
        currentIntersect.object.material.color.set(0xffffff)
        updatePlayerPosition(parseInt(currentIntersect.object.name))
        if(!checkWinner()) {
            setTimeout(() => {
                updatePcPosition()
            }, 800)
        }
        console.log(playedPositions.length)
    }
})

const reset = () => {
    console.log(playedPositions)
    while(scene.getObjectByName('crossdart')){
        scene.remove(scene.getObjectByName('crossdart'))
    }
    while(scene.getObjectByName('ringDart')){
        scene.remove(scene.getObjectByName('ringDart'))
    }
    while(scene.getObjectByName('text')){
        scene.remove(scene.getObjectByName('text'))
    }

    for(let i = 1; i <= 9; i++){
        keys[i].value = (Math.random() - 0.5) * 20
    }
    winner = -1
    playedPositions = []
    dartCount = 0
}

const updatePlayerPosition = (position) => {
    if(playedPositions.includes(position)) {

        let positionToDisplay = keys[position].mesh.position.clone()
        positionToDisplay.z += 5
        createText('Position\nPlayed', positionToDisplay)

        setTimeout(() => {
            scene.remove(scene.getObjectByName('text'))
        }, 1200)
        recheckPosition = 0
    }
    else
    {
        const dart = createCrossDart()
        gsap.to(dart.position, {
            duration: 1.3,
            x: keys[position].mesh.position.x,
            y: keys[position].mesh.position.y,
            z: keys[position].mesh.position.z,
            ease: 'power4.out'
        })
        playedPositions.push(position)
        keys[position].value = 10
        recheckPosition = 1
    }
}

const updatePcPosition = () => {
    if(recheckPosition){
        let pcPosition

        do {
            pcPosition = Math.floor(Math.random() * 9) + 1
        } while (playedPositions.includes(pcPosition))

        const dart = createCircleDart()
        gsap.to(dart.position, {
            duration: 1.3,
            x: keys[pcPosition].mesh.position.x,
            y: keys[pcPosition].mesh.position.y,
            z: keys[pcPosition].mesh.position.z,
            ease: 'power4.out'
        })
        playedPositions.push(pcPosition)
        keys[pcPosition].value = 20
        checkWinner()
    }
}


const checkWinner = () => {
    if(keys[1].value === keys[2].value && keys[2].value === keys[3].value){
        if(keys[1].value === 10) // check if player of pc
            winner = 1
        else if(keys[1].value === 20)
            winner = 2
    }
    else if(keys[4].value === keys[5].value && keys[5].value === keys[6].value){
        if (keys[4].value === 10)
            winner = 1
        else if (keys[4].value === 20)
            winner = 2
    }
    else if(keys[7].value === keys[8].value && keys[8].value === keys[9].value){
        if (keys[7].value === 10)
            winner = 1
        else if (keys[7].value === 20)
            winner = 2
    }
    else if(keys[1].value === keys[4].value && keys[4].value === keys[7].value) {
        if (keys[1].value === 10)
            winner = 1
        else if(keys[1].value === 20)
            winner = 2
    }
    else if(keys[2].value === keys[5].value && keys[5].value === keys[8].value) {
        if (keys[2].value === 10)
            winner = 1
        if (keys[2].value === 20)
            winner = 2
    }
    else if(keys[3].value === keys[6].value && keys[6].value === keys[9].value){
        if (keys[3].value === 10)
            winner = 1
        else if (keys[3].value === 20)
            winner = 2
    }
    else if(keys[1].value === keys[5].value && keys[5].value === keys[9].value) {
        if (keys[1].value === 10)
            winner = 1
        else if(keys[1].value === 20)
            winner = 2
    }
    else if(keys[3].value === keys[5].value && keys[5].value === keys[7].value) {
        if (keys[3].value === 10)
            winner = 1
        else if (keys[3].value === 20)
            winner = 2
    }else if(playedPositions.length === 9){
        winner = 0
    }
    else {
        return false
    }

    if(winner === 1){
        console.log("Player won");
        createText('P l a y e r\nW o n !', new THREE.Vector3(0, 0, -5))
        setTimeout(() => {
            reset()
        }, 1500)
        return true
    }
    else if(winner === 2){
        console.log("Computer won");
        createText('C o m p u t e r \nW o n !', new THREE.Vector3(0, 0, -5))
        setTimeout(() => {
            reset()
        }, 1500)
        return true
    }
    else if(winner === 0){
        console.log("Draw");
        createText('D r a w !', new THREE.Vector3(0, 0, -5))
        setTimeout(() => {
            reset()
        }, 1500)
        return true
    }
}

/**
 * Animate
 */
const clock = new THREE.Clock()
let currentIntersect

const tick = () =>
{
    const elapsedTime = clock.getElapsedTime()

    // Raycaster
    raycaster.setFromCamera(mouse, camera)

    if(loaded){
        const intersects = raycaster.intersectObjects(objToTest)

        for (const intersect of intersects) {
            currentIntersect = intersects[0]
        }
    }

    // Update controls
    controls.update()

    // Render
    renderer.render(scene, camera)

    // Call tick again on the next frame
    window.requestAnimationFrame(tick)
}

tick()